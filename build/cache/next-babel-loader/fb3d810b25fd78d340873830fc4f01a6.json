{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport isomorphicFetch from 'isomorphic-fetch'; // 待优化：\n//     http长链接配置\n// 预置fetch query\n\nconst defaultQuery = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n\nconst getHost = () => {\n  return 'https://api.51ifonts.com';\n};\n\nconst HOST = getHost();\n/**\n * @param {String} url\n * @param {Object} query 请求参数\n * @param {string} responseType json: 处理json数据，text：处理text类型数据（.html）\n */\n\nconst baseRequest = (url, query, responseType = 'json') => {\n  return new Promise(function (resolve, reject) {\n    isomorphicFetch(url, query).then(async response => {\n      if (response.status > 400) {\n        throw new Error('Bad response from server');\n      } else {\n        const _response = await response[responseType](); // 处理text类型数据\n\n\n        if (responseType === 'text') return resolve(_response);\n\n        if (+_response.code !== 1) {\n          console.error(_response.msg);\n          return reject(_response);\n        }\n\n        resolve(_response);\n      }\n    }, reject).catch(() => {});\n  });\n};\n\nconst request = {}; // JSON POST\n\nrequest.post = (url, params = {}, ...rest) => baseRequest(HOST + url, _objectSpread({}, defaultQuery, {\n  body: JSON.stringify(params)\n}), ...rest); // JSON GET\n\n\nrequest.get = (url, params = {}, ...rest) => {\n  const _query = Object.keys(params).map(key => {\n    return key + '=' + params[key];\n  }).join('&');\n\n  return baseRequest(HOST + url + (_query ? '/?' + _query : ''), _objectSpread({}, defaultQuery, {\n    method: 'GET'\n  }), ...rest);\n}; // FORM POST\n\n\nrequest.form = (url, form, ...rest) => {\n  const _data = new FormData(form);\n\n  return baseRequest(HOST + url, _objectSpread({}, defaultQuery, {\n    body: _data\n  }), ...rest);\n}; // 使用示例\n// var form = document.querySelector('form')\n// request.form('/user',form)\n// FILE POST\n\n\nrequest.file = (url, {\n  file,\n  params = {}\n}) => {\n  const _data = new FormData();\n\n  data.append('file', file);\n  Object.keys(params).forEach(key => {\n    data.append(key, params[key]);\n  });\n  return baseRequest(HOST + url, _objectSpread({}, defaultQuery, {\n    body: _data\n  }));\n}; // 使用示例\n// var input = document.querySelector('input[type=\"file\"]');\n// request.file('/user', { file: input.files[0], params: { userName: 'user' } });\n\n\nexport { isomorphicFetch as fetch, baseRequest };\nexport default request;","map":{"version":3,"sources":["/Users/howl/Public/workspace/personalCode/next-app-template/src/utils/request.js"],"names":["isomorphicFetch","defaultQuery","method","headers","getHost","HOST","baseRequest","url","query","responseType","Promise","resolve","reject","then","response","status","Error","_response","code","console","error","msg","catch","request","post","params","rest","body","JSON","stringify","get","_query","Object","keys","map","key","join","form","_data","FormData","file","data","append","forEach","fetch"],"mappings":"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","sourcesContent":["import isomorphicFetch from 'isomorphic-fetch';\n\n// 待优化：\n//     http长链接配置\n\n// 预置fetch query\nconst defaultQuery = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n\nconst getHost = () => {\n  return 'https://api.51ifonts.com';\n};\n\nconst HOST = getHost();\n\n/**\n * @param {String} url\n * @param {Object} query 请求参数\n * @param {string} responseType json: 处理json数据，text：处理text类型数据（.html）\n */\nconst baseRequest = (url, query, responseType = 'json') => {\n  return new Promise(function (resolve, reject) {\n    isomorphicFetch(url, query)\n      .then(async response => {\n        if (response.status > 400) {\n          throw new Error('Bad response from server');\n        } else {\n          const _response = await response[responseType]();\n          // 处理text类型数据\n          if (responseType === 'text') return resolve(_response);\n\n          if (+_response.code !== 1) {\n            console.error(_response.msg);\n            return reject(_response);\n          }\n          resolve(_response);\n        }\n      }, reject)\n      .catch(() => {});\n  });\n};\n\nconst request = {};\n\n// JSON POST\nrequest.post = (url, params = {}, ...rest) => baseRequest(HOST + url, { ...defaultQuery, body: JSON.stringify(params) }, ...rest);\n\n// JSON GET\nrequest.get = (url, params = {}, ...rest) => {\n  const _query = Object.keys(params)\n    .map(key => {\n      return key + '=' + params[key];\n    })\n    .join('&');\n  return baseRequest(HOST + url + (_query ? '/?' + _query : ''), { ...defaultQuery, method: 'GET' }, ...rest);\n};\n\n// FORM POST\nrequest.form = (url, form, ...rest) => {\n  const _data = new FormData(form);\n  return baseRequest(HOST + url, { ...defaultQuery, body: _data }, ...rest);\n};\n// 使用示例\n// var form = document.querySelector('form')\n// request.form('/user',form)\n\n// FILE POST\nrequest.file = (url, { file, params = {} }) => {\n  const _data = new FormData();\n  data.append('file', file);\n  Object.keys(params).forEach(key => {\n    data.append(key, params[key]);\n  });\n  return baseRequest(HOST + url, { ...defaultQuery, body: _data });\n};\n// 使用示例\n// var input = document.querySelector('input[type=\"file\"]');\n// request.file('/user', { file: input.files[0], params: { userName: 'user' } });\n\nexport { isomorphicFetch as fetch, baseRequest };\n\nexport default request;\n"]},"metadata":{},"sourceType":"module"}